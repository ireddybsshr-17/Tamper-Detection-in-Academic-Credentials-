# -*- coding: utf-8 -*-
"""GIGIN-AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFtTe3YCIUfv8wWY453X1bVdF3YSTHay

**Tamper Detection in Academic Credentials**

installing required libraries
"""

!pip install PyPDF2 pdfminer.six pdfplumber opencv-python pytesseract pdf2image scikit-learn
!apt install tesseract-ocr

"""**Sample Dataset Creation**"""

import pandas as pd
import os

# Sample dataset for tamper detection project
data = [
    ["D001", "Degree", "degree_original.pdf", "ABC University", "2020-06-10", "2020-06-10", "No", "None", "Original file"],
    ["D002", "Degree", "degree_tampered.pdf", "ABC University", "2020-06-10", "2023-04-22", "Yes", "Metadata", "Modification date differs from issue date"],
    ["T001", "Transcript", "transcript_original.pdf", "XYZ College", "2021-05-20", "2021-05-20", "No", "None", "Original transcript"],
    ["T002", "Transcript", "transcript_fake.pdf", "XYZ College", "2021-05-20", "2024-01-12", "Yes", "Text Edit", "Grades have been altered"],
    ["C001", "Certification", "cert_original.pdf", "OpenLearn", "2022-11-01", "2022-11-01", "No", "None", "Original certification"],
    ["C002", "Certification", "cert_fake.pdf", "OpenLearn", "2022-11-01", "2023-10-01", "Yes", "Layout", "Date and certification level changed"],
    ["D003", "Degree", "degree_fake_layout.pdf", "DEF Institute", "2019-03-14", "2019-03-14", "Yes", "Layout", "Template doesn't match original"],
    ["T003", "Transcript", "transcript_ocr_diff.pdf", "UVW University", "2020-08-15", "2020-08-15", "Yes", "OCR", "OCR mismatch in course list"],
    ["C003", "Certification", "cert_modified.pdf", "Global Academy", "2023-02-28", "2024-03-01", "Yes", "Metadata", "Modified using online PDF tool"],
    ["D004", "Degree", "degree_clean.pdf", "GHI University", "2018-07-01", "2018-07-01", "No", "None", "Original"],
]

# Create DataFrame
columns = [
    "document_id", "document_type", "file_name", "institution",
    "issued_date", "modified_date", "detected_tampering", "tamper_type", "remarks"
]
df = pd.DataFrame(data, columns=columns)

# Save to CSV
csv_path = "/mnt/data/sample_tamper_detection_dataset.csv"

# Create the directory if it doesn't exist
os.makedirs(os.path.dirname(csv_path), exist_ok=True)

df.to_csv(csv_path, index=False)

csv_path

!pip install fpdf

"""**Creating sample original and tampered PDF documents and updating corresponding CSV files**"""

from fpdf import FPDF
import os
import pandas as pd
from datetime import datetime

# Create output folder
output_dir = "/mnt/data/generated_documents"
os.makedirs(output_dir, exist_ok=True)

# Sample entries from previous dataset
document_entries = [
    # Original documents
    {"document_id": "D001", "document_type": "Degree", "file_name": "degree_original.pdf", "institution": "ABC University", "issued_date": "2020-06-10", "modified_date": "2020-06-10", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original file"},
    {"document_id": "T001", "document_type": "Transcript", "file_name": "transcript_original.pdf", "institution": "XYZ College", "issued_date": "2021-05-20", "modified_date": "2021-05-20", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original transcript"},
    {"document_id": "C001", "document_type": "Certification", "file_name": "cert_original.pdf", "institution": "OpenLearn", "issued_date": "2022-11-01", "modified_date": "2022-11-01", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original certification"},

    # Tampered documents
    {"document_id": "D002", "document_type": "Degree", "file_name": "degree_tampered.pdf", "institution": "ABC University", "issued_date": "2020-06-10", "modified_date": "2023-04-22", "detected_tampering": "Yes", "tamper_type": "Metadata", "remarks": "Modification date differs from issue date"},
    {"document_id": "T002", "document_type": "Transcript", "file_name": "transcript_fake.pdf", "institution": "XYZ College", "issued_date": "2021-05-20", "modified_date": "2024-01-12", "detected_tampering": "Yes", "tamper_type": "Text Edit", "remarks": "Grades have been altered"},
    {"document_id": "C002", "document_type": "Certification", "file_name": "cert_fake.pdf", "institution": "OpenLearn", "issued_date": "2022-11-01", "modified_date": "2023-10-01", "detected_tampering": "Yes", "tamper_type": "Layout", "remarks": "Date and certification level changed"},
]

# Function to create simple PDF files with metadata
def create_pdf(doc, output_dir):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=f"{doc['document_type']} Document", ln=True, align='C')
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"Institution: {doc['institution']}", ln=True)
    pdf.cell(200, 10, txt=f"Issue Date: {doc['issued_date']}", ln=True)
    if doc["tamper_type"] == "Text Edit":
        pdf.cell(200, 10, txt=f"Grades: A+, A, B", ln=True)
    elif doc["tamper_type"] == "Layout":
        pdf.cell(200, 10, txt=f"Level: Expert  |  Expiry Date: 2026-12-31", ln=True)
    else:
        pdf.cell(200, 10, txt="Authentic content with valid layout", ln=True)

    file_path = os.path.join(output_dir, doc["file_name"])
    pdf.output(file_path)

# Generate PDFs
for entry in document_entries:
    create_pdf(entry, output_dir)

# Save updated CSV with file references
csv_path = os.path.join(output_dir, "sample_updated_tamper_dataset.csv")
df = pd.DataFrame(document_entries)
df.to_csv(csv_path, index=False)

csv_path, output_dir

from fpdf import FPDF
import os
import pandas as pd

# Setup output folder
output_dir = "/content/generated_documents"
os.makedirs(output_dir, exist_ok=True)

# Sample dataset entries
document_entries = [
    {"document_id": "D001", "document_type": "Degree", "file_name": "degree_original.pdf", "institution": "ABC University", "issued_date": "2020-06-10", "modified_date": "2020-06-10", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original file"},
    {"document_id": "T001", "document_type": "Transcript", "file_name": "transcript_original.pdf", "institution": "XYZ College", "issued_date": "2021-05-20", "modified_date": "2021-05-20", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original transcript"},
    {"document_id": "C001", "document_type": "Certification", "file_name": "cert_original.pdf", "institution": "OpenLearn", "issued_date": "2022-11-01", "modified_date": "2022-11-01", "detected_tampering": "No", "tamper_type": "None", "remarks": "Original certification"},
    {"document_id": "D002", "document_type": "Degree", "file_name": "degree_tampered.pdf", "institution": "ABC University", "issued_date": "2020-06-10", "modified_date": "2023-04-22", "detected_tampering": "Yes", "tamper_type": "Metadata", "remarks": "Modification date differs from issue date"},
    {"document_id": "T002", "document_type": "Transcript", "file_name": "transcript_fake.pdf", "institution": "XYZ College", "issued_date": "2021-05-20", "modified_date": "2024-01-12", "detected_tampering": "Yes", "tamper_type": "Text Edit", "remarks": "Grades have been altered"},
    {"document_id": "C002", "document_type": "Certification", "file_name": "cert_fake.pdf", "institution": "OpenLearn", "issued_date": "2022-11-01", "modified_date": "2023-10-01", "detected_tampering": "Yes", "tamper_type": "Layout", "remarks": "Date and certification level changed"},
]

# Function to generate PDFs
def create_pdf(doc, output_dir):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=f"{doc['document_type']} Document", ln=True, align='C')
    pdf.ln(10)
    pdf.cell(200, 10, txt=f"Institution: {doc['institution']}", ln=True)
    pdf.cell(200, 10, txt=f"Issue Date: {doc['issued_date']}", ln=True)
    if doc["tamper_type"] == "Text Edit":
        pdf.cell(200, 10, txt=f"Grades: A+, A, B", ln=True)
    elif doc["tamper_type"] == "Layout":
        pdf.cell(200, 10, txt=f"Level: Expert | Expiry Date: 2026-12-31", ln=True)
    else:
        pdf.cell(200, 10, txt="Authentic content with valid layout", ln=True)
    pdf.output(f"{output_dir}/{doc['file_name']}")

# Generate documents
for entry in document_entries:
    create_pdf(entry, output_dir)

# Create and save CSV
df = pd.DataFrame(document_entries)
csv_path = f"{output_dir}/sample_updated_tamper_dataset.csv"
df.to_csv(csv_path, index=False)

print("✅ PDFs and CSV created in:", output_dir)

"""**Analyzing the PDF metadata (creation date, modification date, tool used, etc.) to identify potential tampering**"""

from PyPDF2 import PdfReader
import pandas as pd
import os

# Load your dataset
df = pd.read_csv('/content/generated_documents/sample_updated_tamper_dataset.csv')

# Function to analyze PDF metadata
def analyze_metadata(file_path):
    try:
        reader = PdfReader(file_path)
        meta = reader.metadata
        creation_date = meta.get('/CreationDate', 'Unknown')
        mod_date = meta.get('/ModDate', 'Unknown')
        producer = meta.get('/Producer', 'Unknown')
        # Simple detection rule: if modified date != creation date, flag it
        tampered = creation_date != mod_date
        return creation_date, mod_date, producer, "Yes" if tampered else "No"
    except Exception as e:
        return "Error", "Error", "Error", "Error"

# Apply to dataset
metadata_results = []
base_path = '/content/generated_documents'

for index, row in df.iterrows():
    file_path = os.path.join(base_path, row['file_name'])
    creation, modified, producer, detected = analyze_metadata(file_path)
    metadata_results.append([creation, modified, producer, detected])

# Add results to DataFrame
df['meta_creation'] = [r[0] for r in metadata_results]
df['meta_modified'] = [r[1] for r in metadata_results]
df['meta_producer'] = [r[2] for r in metadata_results]
df['detected_by_script'] = [r[3] for r in metadata_results]

# Save new results
df.to_csv('/content/generated_documents/detection_results.csv', index=False)
df[['file_name', 'detected_tampering', 'detected_by_script', 'remarks']]

"""1.**Layout Detection Using OpenCV (Visual Tampering Check)**- Comparing the visual layout of original and tampered PDFs converted to images"""

!pip install opencv-python pdf2image
!apt-get install poppler-utils

"""Converting PDFs to images"""

from pdf2image import convert_from_path
import os

def convert_pdf_to_image(pdf_path, output_image_path):
    pages = convert_from_path(pdf_path, 150)  # 150 DPI is decent for layout comparison
    pages[0].save(output_image_path, 'JPEG')

"""Comparing layout using Structural Similarity Index (SSIM)"""

import cv2
from skimage.metrics import structural_similarity as ssim

def compare_layouts(image1_path, image2_path):
    img1 = cv2.imread(image1_path, 0)
    img2 = cv2.imread(image2_path, 0)

    img1 = cv2.resize(img1, (600, 800))
    img2 = cv2.resize(img2, (600, 800))

    score, _ = ssim(img1, img2, full=True)
    return score

"""Using SSIM on one original-tampered pair"""

original = "/content/generated_documents/degree_original.pdf"
tampered = "/content/generated_documents/degree_tampered.pdf"
convert_pdf_to_image(original, "orig.jpg")
convert_pdf_to_image(tampered, "tampered.jpg")

layout_score = compare_layouts("orig.jpg", "tampered.jpg")
print(f"🧠 Layout Similarity Score: {layout_score}")
if layout_score < 0.95:
    print("⚠️ Potential layout tampering detected.")
else:
    print("✅ Layout seems authentic.")

"""**2. OCR Comparison Using Tesseract**- Extracts text from tampered and original versions and compares them"""

!pip install pytesseract
!apt-get install tesseract-ocr

"""OCR Extract Function"""

from PIL import Image
import pytesseract

def extract_text(image_path):
    img = Image.open(image_path)
    text = pytesseract.image_to_string(img)
    return text

"""Compare OCR Text"""

text_orig = extract_text("orig.jpg")
text_tampered = extract_text("tampered.jpg")

print("🔎 Text Difference Found?" , text_orig != text_tampered)
if text_orig != text_tampered:
    print("⚠️ Tampering suspected from OCR mismatch.")
else:
    print("✅ Text content appears unchanged.")

"""**3. Anomaly Detection Implementation**

Converting date columns to datetime and  delta calculation
"""

import pandas as pd

# Load your dataset
df = pd.read_csv('/content/generated_documents/sample_updated_tamper_dataset.csv')

# Convert to datetime
df['issued_date'] = pd.to_datetime(df['issued_date'], errors='coerce')
df['modified_date'] = pd.to_datetime(df['modified_date'], errors='coerce')

# Calculate date difference in days
df['mod_gap_days'] = (df['modified_date'] - df['issued_date']).dt.days

"""Flag unusual gaps"""

# Define threshold for anomaly (e.g., anything > 30 days is suspicious)
df['anomaly_flag'] = df['mod_gap_days'].apply(lambda x: 'Yes' if x is not None and x > 30 else 'No')

# View result
df[['file_name', 'issued_date', 'modified_date', 'mod_gap_days', 'anomaly_flag']]

!pip install streamlit PyPDF2 pdf2image pytesseract opencv-python
!apt-get install poppler-utils tesseract-ocr

import streamlit as st
import os

# Create a directory to store uploaded files
upload_dir = "uploads"  # You can change this to your desired directory
os.makedirs(upload_dir, exist_ok=True)

# Add a file uploader to the Streamlit app
uploaded_file = st.file_uploader("Choose a PDF file", type="pdf")

result = {"file": os.path.basename(file_path)}

# Metadata
try:
    reader = PdfReader(file_path)
    meta = reader.metadata
    mod_date = meta.get('/ModDate', '')
    create_date = meta.get('/CreationDate', '')
    result['metadata_modified'] = mod_date
    result['metadata_created'] = create_date
    result['tamper_metadata'] = mod_date != create_date
except:
    result['tamper_metadata'] = False

# Layout SSIM
try:
    img = convert_from_path(file_path, dpi=150)[0]
    img.save("layout.jpg", "JPEG")
    img_gray = cv2.imread("layout.jpg", 0)
    img_resized = cv2.resize(img_gray, (600, 800))
    score, _ = ssim(img_resized, img_resized, full=True)
    result['layout_score'] = round(score, 4)
    result['tamper_layout'] = score < 0.95
except:
    result['tamper_layout'] = False

# OCR
try:
    text = pytesseract.image_to_string(Image.open("layout.jpg"))
    result['ocr_length'] = len(text)
    result['tamper_ocr'] = len(text) < 50  # threshold example
except:
    result['tamper_ocr'] = False

result = {"file": os.path.basename(file_path)}

# Metadata
try:
    reader = PdfReader(file_path)
    meta = reader.metadata
    mod_date = meta.get('/ModDate', '')
    create_date = meta.get('/CreationDate', '')
    result['metadata_modified'] = mod_date
    result['metadata_created'] = create_date
    result['tamper_metadata'] = mod_date != create_date
except Exception as e:
    result['tamper_metadata'] = False

# Layout SSIM
try:
    img = convert_from_path(file_path, dpi=150)[0]
    img.save("layout.jpg", "JPEG")
    img_gray = cv2.imread("layout.jpg", 0)
    img_resized = cv2.resize(img_gray, (600, 800))
    score, _ = ssim(img_resized, img_resized, full=True)
    result['layout_score'] = round(score, 4)
    result['tamper_layout'] = score < 0.95
except Exception as e:
    result['tamper_layout'] = False

# OCR
try:
    text = pytesseract.image_to_string(Image.open("layout.jpg"))
    result['ocr_length'] = len(text)
    result['tamper_ocr'] = len(text) < 50  # threshold example
except Exception as e:
    result['tamper_ocr'] = False

result = {"file": os.path.basename(file_path)}

# Metadata
try:
    reader = PdfReader(file_path)
    meta = reader.metadata
    mod_date = meta.get('/ModDate', '')
    create_date = meta.get('/CreationDate', '')
    result['metadata_modified'] = mod_date
    result['metadata_created'] = create_date
    result['tamper_metadata'] = mod_date != create_date
except Exception as e:
    result['tamper_metadata'] = False

# Layout SSIM
try:
    img = convert_from_path(file_path, dpi=150)[0]
    img.save("layout.jpg", "JPEG")
    img_gray = cv2.imread("layout.jpg", 0)
    img_resized = cv2.resize(img_gray, (600, 800))
    score, _ = ssim(img_resized, img_resized, full=True)
    result['layout_score'] = round(score, 4)
    result['tamper_layout'] = score < 0.95
except Exception as e:
    result['tamper_layout'] = False

# OCR
try:
    text = pytesseract.image_to_string(Image.open("layout.jpg"))
    result['ocr_length'] = len(text)
    result['tamper_ocr'] = len(text) < 50  # threshold example
except Exception as e:
    result['tamper_ocr'] = False

result = {"file": os.path.basename(file_path)}

# Metadata
try:
    reader = PdfReader(file_path)
    meta = reader.metadata
    mod_date = meta.get('/ModDate', '')
    create_date = meta.get('/CreationDate', '')
    result['metadata_modified'] = mod_date
    result['metadata_created'] = create_date
    result['tamper_metadata'] = mod_date != create_date
except Exception as e:
    result['tamper_metadata'] = False

# Layout SSIM
try:
    img = convert_from_path(file_path, dpi=150)[0]
    img.save("layout.jpg", "JPEG")
    img_gray = cv2.imread("layout.jpg", 0)
    img_resized = cv2.resize(img_gray, (600, 800))
    score, _ = ssim(img_resized, img_resized, full=True)
    result['layout_score'] = round(score, 4)
    result['tamper_layout'] = score < 0.95
except Exception as e:
    result['tamper_layout'] = False

# OCR
try:
    text = pytesseract.image_to_string(Image.open("layout.jpg"))
    result['ocr_length'] = len(text)
    result['tamper_ocr'] = len(text) < 50  # threshold example
except Exception as e:
    result['tamper_ocr'] = False

# Overall
result['overall_tampered'] = result['tamper_metadata'] or result['tamper_layout'] or result['tamper_ocr']